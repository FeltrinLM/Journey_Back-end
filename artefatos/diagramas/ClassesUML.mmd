classDiagram

%%Models
    class Colecao {
        - int colecaoId
        - String nome
        - LocalDate dataInicio
        - LocalDate dataFim
        +getColecaoId(): int
        +setColecaoId(int): void
        +getNome(): String
        +setNome(String): void
        +getDataInicio(): LocalDate
        +setDataInicio(LocalDate): void
        +getDataFim(): LocalDate
        +setDataFim(LocalDate): void
        +getEstampas(): List<Estampa>
        +getChaveiros(): List<Chaveiro>
    }

    class Estampa {
        - int estampaId
        - String nome
        - int quantidade
        - Colecao colecao
        +getEstampaId(): int
        +setEstampaId(int): void
        +getNome(): String
        +setNome(String): void
        +getQuantidade(): int
        +setQuantidade(int): void
        +getColecao(): Colecao
        +setColecao(Colecao): void
    }

    class Peca {
        - int pecaId
        - String tipo
        - String tamanho
        - String cor
        - int quantidade
        +getPecaId(): int
        +setPecaId(int): void
        +getTipo(): String
        +setTipo(String): void
        +getTamanho(): String
        +setTamanho(String): void
        +getCor(): String
        +setCor(String): void
        +getQuantidade(): int
        +setQuantidade(int): void
    }


    class Chaveiro {
        - int chaveiroId
        - String chaveiroModelo
        - Colecao colecao
        +getChaveiroId(): int
        +setChaveiroId(int): void
        +getChaveiroModelo(): String
        +setChaveiroModelo(String): void
        +getColecao(): Colecao
        +setColecao(Colecao): void
    }

    class Adesivo {
        - int adesivoId
        - String adesivoModelo
        - boolean cromatico
        +getAdesivoId(): int
        +setAdesivoId(int): void
        +getAdesivoModelo(): String
        +setAdesivoModelo(String): void
        +isCromatico(): boolean
        +setCromatico(boolean): void
    }

    class Usuario {
        - int usuarioId
        - String nome
        - String senha
        - TipoUsuario tipo
        - List<HistoricoAlteracao> historicos
        +Usuario()
        +Usuario(String nome, String senha, TipoUsuario tipo)
        +getUsuarioId(): int
        +setUsuarioId(int): void
        +getNome(): String
        +setNome(String): void
        +getSenha(): String
        +setSenha(String): void
        +getTipo(): TipoUsuario
        +setTipo(TipoUsuario): void
        +getHistoricos(): List<HistoricoAlteracao>
        +setHistoricos(List<HistoricoAlteracao>): void
    }


    class TipoUsuario {
        <<enumeration>>
        ADMINISTRADOR
        FUNCIONARIO
    }

    class HistoricoAlteracao {
        - int id
        - String entidade
        - int entidadeId
        - String campoAlterado
        - String valorAntigo
        - String valorNovo
        - LocalDateTime dataHora
        - Usuario usuario
        + getId(): int
        + setId(int): void
        + getEntidade(): String
        + setEntidade(String): void
        + getEntidadeId(): int
        + setEntidadeId(int): void
        + getCampoAlterado(): String
        + setCampoAlterado(String): void
        + getValorAntigo(): String
        + setValorAntigo(String): void
        + getValorNovo(): String
        + setValorNovo(String): void
        + getDataHora(): LocalDateTime
        + setDataHora(LocalDateTime): void
        + getUsuario(): Usuario
        + setUsuario(Usuario): void
    }

    Colecao "1" --> "n" Estampa : contem
    Colecao "1" --> "n" Chaveiro : contem
    Usuario --> TipoUsuario : tipo
    Usuario "1" --> "n" HistoricoAlteracao : realiza

%%Repositorys

    class ColecaoRepository {
        <<interface>>
        + save(Colecao): Colecao
        + findAll(): List<Colecao>
        + findById(int): Optional<Colecao>
        + deleteById(int): void
    }

    class EstampaRepository {
        <<interface>>
        +findAll(): List<Estampa>
        +findById(int): Optional<Estampa>
        +save(Estampa): Estampa
        +deleteById(int): void
    }

    class PecaRepository {
        <<interface>>
        +findAll(): List<Peca>
        +findById(int): Optional<Peca>
        +save(Peca): Peca
        +deleteById(int): void
    }

    class ChaveiroRepository {
        <<interface>>
        +findAll(): List<Chaveiro>
        +findById(int): Optional<Chaveiro>
        +save(Chaveiro): Chaveiro
        +deleteById(int): void
    }

    class AdesivoRepository {
        <<interface>>
        +findAll(): List<Adesivo>
        +findById(int): Optional<Adesivo>
        +save(Adesivo): Adesivo
        +deleteById(int): void
    }

    class UsuarioRepository {
        <<interface>>
        +Optional<Usuario> findByNome(String nome)
        +boolean existsByNome(String nome)
        +Usuario save(Usuario)
        +void deleteById(int id)
        +Optional<Usuario> findById(int id)
        +List<Usuario> findAll()
    }

    class HistoricoAlteracaoRepository {
        <<interface>>
        +List<HistoricoAlteracao> findByEntidade(String entidade)
        +List<HistoricoAlteracao> findByEntidadeAndEntidadeId(String entidade, int entidadeId)
        +List<HistoricoAlteracao> findByUsuarioUsuarioId(int usuarioId)
        +List<HistoricoAlteracao> findAllByOrderByDataHoraDesc()
        +<T extends HistoricoAlteracao> save(T entity)
        +Optional<HistoricoAlteracao> findById(int id)
        +List<HistoricoAlteracao> findAll()
        +void deleteById(int id)
    }

%%Services

    class ColecaoService {
        - ColecaoRepository repository
        - ColecaoMapper mapper
        + listarColecoes(): List<ColecaoDTO>
        + salvarColecao(ColecaoDTO): ColecaoDTO
        + editarColecao(ColecaoDTO): ColecaoDTO
        + removerColecao(int): void
    }

    class EstampaService {
        - EstampaRepository estampaRepository
        - EstampaMapper estampaMapper
        +List<EstampaDTO> getAll()
        +EstampaDTO getById(int)
        +EstampaDTO create(EstampaDTO)
        +EstampaDTO update(int, EstampaDTO)
        +void delete(int)
    }

    class PecaService {
        - PecaRepository pecaRepository
        - PecaMapper pecaMapper
        +List<PecaDTO> getAll()
        +PecaDTO getById(int)
        +PecaDTO create(PecaDTO)
        +PecaDTO update(int, PecaDTO)
        +void delete(int)
    }

    class ChaveiroService {
        - ChaveiroRepository chaveiroRepository
        - ChaveiroMapper chaveiroMapper
        +List<ChaveiroDTO> getAll()
        +ChaveiroDTO getById(int)
        +ChaveiroDTO create(ChaveiroDTO)
        +ChaveiroDTO update(int, ChaveiroDTO)
        +void delete(int)
    }

    class AdesivoService {
        - AdesivoRepository adesivoRepository
        - AdesivoMapper adesivoMapper
        +List<AdesivoDTO> getAll()
        +AdesivoDTO getById(int)
        +AdesivoDTO create(AdesivoDTO)
        +AdesivoDTO update(int, AdesivoDTO)
        +void delete(int)
    }

    class UsuarioService {
        +List<UsuarioDTO> listarUsuarios()
        +UsuarioDTO buscarPorId(int id)
        +UsuarioDTO criarUsuario(UsuarioDTO dto)
        +UsuarioDTO editarUsuario(int id, UsuarioDTO dto)
        +void deletarUsuario(int id)
        +boolean validarLogin(String nome, String senha)
        +boolean sistemaSemUsuarios()
        +UsuarioDTO criarAdminPadrao()
    }

%%Mappers

    class ColecaoMapper {
        + toDTO(Colecao): ColecaoDTO
        + toModel(ColecaoDTO): Colecao
    }

    class EstampaMapper{
        +Estampa toModel(EstampaDTO): Estampa
        +EstampaDTO toDTO(Estampa): EstampaDTO
    }

    class PecaMapper {
        +Peca toModel(PecaDTO): Peca
        +PecaDTO toDTO(Peca): PecaDTO
    }


    class ChaveiroMapper {
        +Chaveiro toModel(ChaveiroDTO): Chaveiro
        +ChaveiroDTO toDTO(Chaveiro): ChaveiroDTO
    }

    class AdesivoMapper {
        +Adesivo toModel(AdesivoDTO): Adesivo
        +AdesivoDTO toDTO(Adesivo): AdesivoDTO
    }

    class UsuarioMapper {
        +Usuario toModel(UsuarioDTO dto)
        +UsuarioDTO toDTO(Usuario entity)
    }

    class HistoricoAlteracaoMapper {
        +HistoricoAlteracao toModel(HistoricoAlteracaoDTO dto, Usuario usuario)
        +HistoricoAlteracaoDTO toDTO(HistoricoAlteracao entity)
    }

%%DTOs

    class ColecaoDTO {
        - int colecaoId
        - String nome
        - LocalDate dataInicio
        - LocalDate dataFim
        + getColecaoId(): int
        + setColecaoId(int): void
        + getNome(): String
        + setNome(String): void
        + getDataInicio(): LocalDate
        + setDataInicio(LocalDate): void
        + getDataFim(): LocalDate
        + setDataFim(LocalDate): void
    }

    class EstampaDTO {
        - int estampaId
        - String nome
        - int quantidade
        - int colecaoId
        +getEstampaId(): int
        +setEstampaId(int): void
        +getNome(): String
        +setNome(String): void
        +getQuantidade(): int
        +setQuantidade(int): void
        +getColecaoId(): int
        +setColecaoId(int): void
    }

    class PecaDTO {
        - int pecaId
        - String tipo
        - String tamanho
        - String cor
        - int quantidade
        +getPecaId(): int
        +setPecaId(int): void
        +getTipo(): String
        +setTipo(String): void
        +getTamanho(): String
        +setTamanho(String): void
        +getCor(): String
        +setCor(String): void
        +getQuantidade(): int
        +setQuantidade(int): void
    }

    class ChaveiroDTO {
        - int chaveiroId
        - String chaveiroModelo
        - int colecaoId
        +getChaveiroId(): int
        +setChaveiroId(int): void
        +getChaveiroModelo(): String
        +setChaveiroModelo(String): void
        +getColecaoId(): int
        +setColecaoId(int): void
    }

    class AdesivoDTO {
        - int adesivoId
        - String adesivoModelo
        - boolean cromatico
        +getAdesivoId(): int
        +setAdesivoId(int): void
        +getAdesivoModelo(): String
        +setAdesivoModelo(String): void
        +isCromatico(): boolean
        +setCromatico(boolean): void
    }

    class UsuarioDTO {
        - int usuarioId
        - String nome
        - String tipo
        +getUsuarioId(): int
        +setUsuarioId(int): void
        +getNome(): String
        +setNome(String): void
        +getTipo(): String
        +setTipo(String): void
    }

    class HistoricoAlteracaoDTO {
        - long id
        - String entidade
        - int entidadeId
        - String campoAlterado
        - String valorAntigo
        - String valorNovo
        - LocalDateTime dataHora
        - int usuarioId
        + getId(): long
        + setId(long): void
        + getEntidade(): String
        + setEntidade(String): void
        + getEntidadeId(): int
        + setEntidadeId(int): void
        + getCampoAlterado(): String
        + setCampoAlterado(String): void
        + getValorAntigo(): String
        + setValorAntigo(String): void
        + getValorNovo(): String
        + setValorNovo(String): void
        + getDataHora(): LocalDateTime
        + setDataHora(LocalDateTime): void
        + getUsuarioId(): int
        + setUsuarioId(int): void
    }



%%Controllers

    class ColecaoController {
        - ColecaoService service
        + getAll(): List<ColecaoDTO>
        + post(ColecaoDTO): ColecaoDTO
        + put(ColecaoDTO): ColecaoDTO
        + delete(int): void
    }

    class EstampaController {
        - EstampaService estampaService
        +List<EstampaDTO> getAll()
        +EstampaDTO getById(int)
        +EstampaDTO create(EstampaDTO)
        +EstampaDTO update(int, EstampaDTO)
        +void delete(int)
    }

    class PecaController {
        - PecaService pecaService
        +List<PecaDTO> getAll()
        +PecaDTO getById(int)
        +PecaDTO create(PecaDTO)
        +PecaDTO update(int, PecaDTO)
        +void delete(int)
    }

    class ChaveiroController {
        - ChaveiroService chaveiroService
        +List<ChaveiroDTO> getAll()
        +ChaveiroDTO getById(int)
        +ChaveiroDTO create(ChaveiroDTO)
        +ChaveiroDTO update(int, ChaveiroDTO)
        +void delete(int)
    }

    class AdesivoController {
        - AdesivoService adesivoService
        +List<AdesivoDTO> getAll()
        +AdesivoDTO getById(int)
        +AdesivoDTO create(AdesivoDTO)
        +AdesivoDTO update(int, AdesivoDTO)
        +void delete(int)
    }

    class UsuarioController {
        +List<UsuarioDTO> getAll()
        +UsuarioDTO getById(int id)
        +UsuarioDTO post(UsuarioDTO dto)
        +UsuarioDTO put(int id, UsuarioDTO dto)
        +void delete(int id)
        +boolean login(String nome, String senha)
        +void inicializarSistema()
    }

%%Relacoes

    AdesivoController -->AdesivoService : chama
    AdesivoService -->AdesivoRepository : persiste/busca
    AdesivoService -->AdesivoMapper : converteDTO<->Model
    AdesivoRepository -->Adesivo: trabalha com a entidade
    AdesivoMapper --> Adesivo
    AdesivoMapper --> AdesivoDTO

    ColecaoController -->ColecaoService : chama
    ColecaoService -->ColecaoRepository : persiste/busca
    ColecaoService -->ColecaoMapper : converteDTO<->Model
    ColecaoRepository -->Colecao: trabalha com a entidade
    ColecaoMapper --> Colecao
    ColecaoMapper --> ColecaoDTO

    EstampaController -->EstampaService : chama
    EstampaService -->EstampaRepository : persiste/busca
    EstampaService -->EstampaMapper : converteDTO<->Model
    EstampaRepository -->Estampa: trabalha com a entidade
    EstampaMapper --> Estampa
    EstampaMapper --> EstampaDTO

    PecaController -->PecaService : chama
    PecaService -->PecaRepository : persiste/busca
    PecaService -->PecaMapper : converteDTO<->Model
    PecaRepository -->Peca: trabalha com a entidade
    PecaMapper -->Peca
    PecaMapper --> PecaDTO

    ChaveiroController -->ChaveiroService : chama
    ChaveiroService -->ChaveiroRepository : persiste/busca
    ChaveiroService -->ChaveiroMapper : converteDTO<->Model
    ChaveiroRepository -->Chaveiro: trabalha com a entidade
    ChaveiroMapper --> Chaveiro
    ChaveiroMapper --> ChaveiroDTO

    UsuarioController -->UsuarioService : chama
    UsuarioService -->UsuarioRepository : persiste/busca
    UsuarioService -->UsuarioMapper : converteDTO<->Model
    UsuarioRepository -->Usuario: trabalha com a entidade
    UsuarioMapper --> Usuario
    UsuarioMapper --> UsuarioDTO

    HistoricoAlteracaoController -->HistoricoAlteracaoService : chama
    HistoricoAlteracaoService -->HistoricoAlteracaoRepository : persiste/busca
    HistoricoAlteracaoService -->HistoricoAlteracaoMapper : converteDTO<->Model
    HistoricoAlteracaoRepository -->HistoricoAlteracao: trabalha com a entidade
    HistoricoAlteracaoMapper --> HistoricoAlteracao
    HistoricoAlteracaoMapper --> HistoricoAlteracaoDTO